name: Deploy Flask ECS App with X-Ray and VPC Networking

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 255945442255
  ECR_REPOSITORY: christanyk-ecr-private-repository
  ECS_CLUSTER: christanyk-flask-xray-cluster
  ECS_SERVICE: christanyk-flask-service
  TASK_ROLE: christanyk-ecs-xray-taskrole
  TASK_EXEC_ROLE: christanyk-ecs-xray-taskexecutionrole
  IMAGE_TAG: latest
  VPC_NAME: christanyk-xray-vpc
  SECURITY_GROUP: christanyk-xray

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR Repository if not exists
      run: |
        aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" \
        || aws ecr create-repository --repository-name "$ECR_REPOSITORY"

    - name: Create ECS Cluster if not exists
      run: |
        aws ecs describe-clusters --clusters "$ECS_CLUSTER" --query "clusters[0].status" --output text \
        || aws ecs create-cluster --cluster-name "$ECS_CLUSTER"

    - name: Create christanyk-ecs-xray-taskrole if not exists
      run: |
        aws iam get-role --role-name "$TASK_ROLE" --query 'Role.Arn' --output text \
        || aws iam create-role --role-name "$TASK_ROLE" --assume-role-policy-document '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }'

        aws iam attach-role-policy --role-name "$TASK_ROLE" --policy-arn arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

    - name: Create christanyk-ecs-xray-taskexecutionrole if not exists
      run: |
        aws iam get-role --role-name "$TASK_EXEC_ROLE" --query 'Role.Arn' --output text \
        || aws iam create-role --role-name "$TASK_EXEC_ROLE" --assume-role-policy-document '{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }'

        aws iam attach-role-policy --role-name "$TASK_EXEC_ROLE" --policy-arn arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        aws iam attach-role-policy --role-name "$TASK_EXEC_ROLE" --policy-arn arn:aws:iam::aws:policy/SecretsManagerReadWrite
        aws iam attach-role-policy --role-name "$TASK_EXEC_ROLE" --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

        - name: Create Networking: VPC, Subnets, and Security Group
      run: |
        vpc_id=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
        aws ec2 create-tags --resources $vpc_id --tags Key=Name,Value=$VPC_NAME
        aws ec2 modify-vpc-attribute --vpc-id $vpc_id --enable-dns-support "{\"Value\":true}"
        aws ec2 modify-vpc-attribute --vpc-id $vpc_id --enable-dns-hostnames "{\"Value\":true}"

        subnet_id=$(aws ec2 create-subnet --vpc-id $vpc_id --cidr-block 10.0.1.0/24 --availability-zone us-east-1a --query 'Subnet.SubnetId' --output text)
        aws ec2 modify-subnet-attribute --subnet-id $subnet_id --map-public-ip-on-launch

        sg_id=$(aws ec2 create-security-group --group-name $SECURITY_GROUP --description "Allow TCP 8080" --vpc-id $vpc_id --query 'GroupId' --output text)
        aws ec2 authorize-security-group-ingress --group-id $sg_id --protocol tcp --port 8080 --cidr 0.0.0.0/0

        echo "VPC ID: $vpc_id"
        echo "Subnet ID: $subnet_id"
        echo "Security Group ID: $sg_id"

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build Docker Image
      working-directory: Assignment 3.5
      run: |
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG \
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Push Docker Image to ECR
      run: |
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
